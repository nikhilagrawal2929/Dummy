package com.example;

import com.amazonaws.auth.AWSStaticCredentialsProvider;
import com.amazonaws.auth.BasicAWSCredentials;
import com.amazonaws.regions.Regions;
import com.amazonaws.services.s3.AmazonS3;
import com.amazonaws.services.s3.AmazonS3ClientBuilder;
import com.amazonaws.services.s3.model.S3Object;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import java.io.*;
import java.nio.file.Files;
import java.nio.file.Paths;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;
import java.util.stream.Collectors;
import org.json.JSONObject;

public class ShellScriptRunner {

    private static final Logger logger = LoggerFactory.getLogger(ShellScriptRunner.class);

    private static final String BUCKET_NAME = "recp-2cp-dev-pm-files";
    private static final String AWS_ACCESS_KEY_ID = "XXXx";  // replace with your actual access key
    private static final String AWS_SECRET_ACCESS_KEY = "XXXx";  // replace with your actual secret key

    public static void main(String[] args) {
        if (args.length != 2) {
            System.err.println("Usage: java -jar ShellScriptRunner.jar <csv-file-path> <shell-script-path>");
            System.exit(1);
        }

        String csvFilePath = args[0];
        String shellScriptPath = args[1];

        try {
            String apiResponse = callApi(csvFilePath);
            List<String> urls = extractUrls(apiResponse);

            if (urls.isEmpty()) {
                logger.error("No URLs found in the API response.");
                System.exit(1);
            }

            String textFileName = generateTextFileName();
            createTextFile(textFileName, urls);
            downloadFilesFromS3(textFileName);
        } catch (Exception e) {
            logger.error("An error occurred: ", e);
            System.exit(1);
        }
    }

    private static String callApi(String csvFilePath) throws IOException {
        String apiUrl = "https://app.ccpdev.shared.banksvcs.net/ccp/api/batch/regressionBulkRun";
        HttpURLConnection connection = null;
        try {
            URL url = new URL(apiUrl);
            connection = (HttpURLConnection) url.openConnection();
            connection.setRequestMethod("POST");
            connection.setDoOutput(true);

            String boundary = "Boundary-" + System.currentTimeMillis();
            connection.setRequestProperty("Content-Type", "multipart/form-data; boundary=" + boundary);

            try (OutputStream outputStream = connection.getOutputStream();
                 PrintWriter writer = new PrintWriter(new OutputStreamWriter(outputStream, "UTF-8"), true)) {

                writer.append("--").append(boundary).append("\r\n");
                writer.append("Content-Disposition: form-data; name=\"file\"; filename=\"")
                      .append(csvFilePath).append("\"\r\n");
                writer.append("Content-Type: text/csv\r\n\r\n");
                writer.flush();

                Files.copy(Paths.get(csvFilePath), outputStream);
                outputStream.flush();

                writer.append("\r\n").flush();
                writer.append("--").append(boundary).append("--").append("\r\n").flush();
            }

            int responseCode = connection.getResponseCode();
            if (responseCode == HttpURLConnection.HTTP_OK) {
                return readResponse(connection.getInputStream());
            } else {
                logger.error("API response code: " + responseCode);
                throw new IOException("Failed to call API");
            }
        } finally {
            if (connection != null) {
                connection.disconnect();
            }
        }
    }

    private static String readResponse(InputStream inputStream) throws IOException {
        StringBuilder response = new StringBuilder();
        try (BufferedReader reader = new BufferedReader(new InputStreamReader(inputStream, "UTF-8"))) {
            String line;
            while ((line = reader.readLine()) != null) {
                response.append(line).append("\n");
            }
        }
        return response.toString().trim();
    }

    private static List<String> extractUrls(String apiResponse) {
        JSONObject responseJson = new JSONObject(apiResponse);
        return responseJson.toMap().values().stream()
                .map(value -> value.toString())
                .filter(value -> value.contains("URL"))
                .map(value -> value.substring(value.indexOf("URL : ") + 6).trim())
                .sorted()
                .collect(Collectors.toList());
    }

    private static String generateTextFileName() {
        SimpleDateFormat sdf = new SimpleDateFormat("yyMMddHHmmss");
        String timestamp = sdf.format(new Date());
        return "S3-url-" + timestamp + ".txt";
    }

    private static void createTextFile(String fileName, List<String> urls) throws IOException {
        try (BufferedWriter writer = new BufferedWriter(new FileWriter(fileName))) {
            writer.write("dumpy\n");
            for (String url : urls) {
                writer.write(url + "\n");
            }
        }
    }

    private static void downloadFilesFromS3(String textFileName) throws IOException {
        AmazonS3 s3Client = AmazonS3ClientBuilder.standard()
                .withRegion(Regions.EU_WEST_1)
                .withCredentials(new AWSStaticCredentialsProvider(
                        new BasicAWSCredentials(AWS_ACCESS_KEY_ID, AWS_SECRET_ACCESS_KEY)))
                .build();

        String directory = new SimpleDateFormat("yyyy-MM-dd").format(new Date());
        File dir = new File(directory);
        if (!dir.exists()) {
            if (dir.mkdirs()) {
                logger.info("Directory '{}' created", directory);
            } else {
                logger.error("Failed to create directory '{}'", directory);
                return;
            }
        }

        try (BufferedReader reader = new BufferedReader(new FileReader(textFileName))) {
            String line;
            reader.readLine(); // skip the first "dumpy" line
            while ((line = reader.readLine()) != null) {
                logger.info("Processing URL: {}", line);
                String s3FileName = line.substring(line.lastIndexOf('/') + 1);
                File localFile = new File(dir, s3FileName);

                try {
                    S3Object s3Object = s3Client.getObject(BUCKET_NAME, s3FileName);
                    try (InputStream s3InputStream = s3Object.getObjectContent();
                         FileOutputStream fos = new FileOutputStream(localFile)) {
                        byte[] read_buf = new byte[1024];
                        int read_len;
                        while ((read_len = s3InputStream.read(read_buf)) > 0) {
                            fos.write(read_buf, 0, read_len);
                        }
                        logger.info("File '{}' downloaded successfully to '{}'", s3FileName, localFile.getPath());
                    }
                } catch (Exception e) {
                    logger.error("Failed to download '{}': {}", s3FileName, e.getMessage());
                }
            }
        }
    }
}
