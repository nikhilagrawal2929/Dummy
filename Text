package com.example;

import java.io.*;
import java.net.HttpURLConnection;
import java.net.URL;
import java.nio.file.Files;
import java.nio.file.Paths;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;
import java.util.Map;
import java.util.stream.Collectors;
import org.json.JSONObject;
import org.apache.commons.io.IOUtils;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class ShellScriptRunner {

    private static final Logger logger = LoggerFactory.getLogger(ShellScriptRunner.class);

    public static void main(String[] args) {
        if (args.length != 2) {
            System.err.println("Usage: java -jar ShellScriptRunner.jar <csv-file-path> <shell-script-path>");
            System.exit(1);
        }

        String csvFilePath = args[0];
        String shellScriptPath = args[1];

        try {
            String apiResponse = callApi(csvFilePath);
            List<String> urls = extractUrls(apiResponse);

            if (urls.isEmpty()) {
                logger.error("No URLs found in the API response.");
                System.exit(1);
            }

            String textFileName = generateTextFileName();
            createTextFile(textFileName, urls);
            runShellScript(shellScriptPath, textFileName);
        } catch (Exception e) {
            logger.error("An error occurred: ", e);
            System.exit(1);
        }
    }

    private static String callApi(String csvFilePath) throws IOException {
        String apiUrl = "https://app.ccpdev.shared.banksvcs.net/ccp/api/batch/regressionBulkRun";
        HttpURLConnection connection = null;
        try {
            URL url = new URL(apiUrl);
            connection = (HttpURLConnection) url.openConnection();
            connection.setRequestMethod("POST");
            connection.setDoOutput(true);

            String boundary = "Boundary-" + System.currentTimeMillis();
            connection.setRequestProperty("Content-Type", "multipart/form-data; boundary=" + boundary);

            try (OutputStream outputStream = connection.getOutputStream();
                 PrintWriter writer = new PrintWriter(new OutputStreamWriter(outputStream, "UTF-8"), true)) {

                writer.append("--").append(boundary).append("\r\n");
                writer.append("Content-Disposition: form-data; name=\"file\"; filename=\"")
                      .append(csvFilePath).append("\"\r\n");
                writer.append("Content-Type: text/csv\r\n\r\n");
                writer.flush();

                Files.copy(Paths.get(csvFilePath), outputStream);
                outputStream.flush();

                writer.append("\r\n").flush();
                writer.append("--").append(boundary).append("--").append("\r\n").flush();
            }

            int responseCode = connection.getResponseCode();
            if (responseCode == HttpURLConnection.HTTP_OK) {
                return IOUtils.toString(connection.getInputStream(), "UTF-8");
            } else {
                logger.error("API response code: " + responseCode);
                throw new IOException("Failed to call API");
            }
        } finally {
            if (connection != null) {
                connection.disconnect();
            }
        }
    }

    private static List<String> extractUrls(String apiResponse) {
        JSONObject responseJson = new JSONObject(apiResponse);
        return responseJson.toMap().values().stream()
                .map(value -> value.toString())
                .filter(value -> value.contains("URL"))
                .map(value -> value.substring(value.indexOf("URL : ") + 6).trim())
                .sorted()
                .collect(Collectors.toList());
    }

    private static String generateTextFileName() {
        SimpleDateFormat sdf = new SimpleDateFormat("yyMMddHHmmss");
        String timestamp = sdf.format(new Date());
        return "S3-url-" + timestamp + ".txt";
    }

    private static void createTextFile(String fileName, List<String> urls) throws IOException {
        try (BufferedWriter writer = new BufferedWriter(new FileWriter(fileName))) {
            writer.write("dumpy\n");
            for (String url : urls) {
                writer.write(url + "\n");
            }
        }
    }

    private static void runShellScript(String shellScriptPath, String textFileName) throws IOException, InterruptedException {
        ProcessBuilder processBuilder = new ProcessBuilder(shellScriptPath, textFileName);
        processBuilder.redirectErrorStream(true);
        Process process = processBuilder.start();
        try (BufferedReader reader = new BufferedReader(new InputStreamReader(process.getInputStream()))) {
            String line;
            while ((line = reader.readLine()) != null) {
                logger.info(line);
            }
        }
        int exitCode = process.waitFor();
        if (exitCode != 0) {
            throw new RuntimeException("Shell script exited with error code: " + exitCode);
        }
    }
}
