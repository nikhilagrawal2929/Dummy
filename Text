import java.io.BufferedReader;
import java.io.File;
import java.io.IOException;
import java.io.InputStreamReader;

public class ShellScriptRunner {

    public static void main(String[] args) {
        // Check if the text file argument is provided
        if (args.length == 0) {
            System.err.println("No text file argument provided.");
            System.exit(1);
        }

        String textFilePath = args[0];
        File textFile = new File(textFilePath);

        // Check if the provided file exists
        if (!textFile.exists()) {
            System.err.println("The provided text file does not exist: " + textFilePath);
            System.exit(1);
        }

        // Define the shell script path (use absolute path)
        String shellScriptPath = "C:/Thunderhead/ccp-batch/src/main/resources/s3-files-download1.sh"; // Provided path

        // Ensure script file exists
        File scriptFile = new File(shellScriptPath);
        if (!scriptFile.exists()) {
            System.err.println("The provided shell script does not exist: " + shellScriptPath);
            System.exit(1);
        }

        // Create the command to run the shell script with the text file as an argument
        ProcessBuilder processBuilder;

        // Check if the system is Windows or Unix-based
        if (System.getProperty("os.name").toLowerCase().contains("win")) {
            // Use Git Bash or another bash interpreter installed on Windows
            processBuilder = new ProcessBuilder("bash", shellScriptPath, textFilePath); // Windows with bash
        } else {
            processBuilder = new ProcessBuilder("/bin/bash", shellScriptPath, textFilePath); // Unix-based
        }

        // Redirect the error and output streams to inherit from the parent process
        processBuilder.redirectErrorStream(true);

        try {
            // Start the process
            Process process = processBuilder.start();

            // Read the output from the process
            BufferedReader reader = new BufferedReader(new InputStreamReader(process.getInputStream()));
            String line;
            while ((line = reader.readLine()) != null) {
                System.out.println(line);
            }

            // Wait for the process to complete and get the exit value
            int exitCode = process.waitFor();
            System.out.println("Shell script exited with code: " + exitCode);

        } catch (IOException e) {
            System.err.println("An IOException occurred: " + e.getMessage());
            e.printStackTrace();
        } catch (InterruptedException e) {
            System.err.println("The process was interrupted: " + e.getMessage());
            e.printStackTrace();
        }
    }
}
